<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e" kind="page">
    <compoundname>md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e</compoundname>
    <title>About</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md48"/></para>
<para>Provides high-performance and low-allocating types that serialize objects to JavaScript Object Notation (JSON) text and deserialize JSON text to objects, with UTF-8 support built-in. Also provides types to read and write JSON text encoded as UTF-8, and to create an in-memory document object model (DOM), that is read-only, for random access of the JSON elements within a structured view of the data.</para>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md49">
<title>Key Features</title><para><itemizedlist>
<listitem><para>High-performance reader and writer types for UTF-8 encoded JSON.</para>
</listitem><listitem><para>A fully-featured JSON serializer for .NET types using reflection or source generated contracts.</para>
</listitem><listitem><para>A high-performance read-only JSON DOM (JsonDocument) and a mutable DOM that interoperates with the serializer (JsonNode).</para>
</listitem><listitem><para>Built-in support for async serialization, including IAsyncEnumerable support.</para>
</listitem><listitem><para>Fully customizable contract model for serializable types.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md50">
<title>How to Use</title><para>The System.Text.Json library is built-in as part of the shared framework in .NET Runtime. The package can be installed when you need to use the most recent version in older target frameworks.</para>
<para>Serialization: <programlisting filename=".cs"><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal">System;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">WeatherForecast<sp/>forecast<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(DateTimeOffset.Now,<sp/>26.6f,<sp/></highlight><highlight class="stringliteral">&quot;Sunny&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">var<sp/>serialized<sp/>=<sp/>JsonSerializer.Serialize(forecast);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine(serialized);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{&quot;Date&quot;:&quot;2023-08-02T16:01:20.9025406+00:00&quot;,&quot;TemperatureCelsius&quot;:26.6,&quot;Summary&quot;:&quot;Sunny&quot;}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">var<sp/>forecastDeserialized<sp/>=<sp/>JsonSerializer.Deserialize&lt;WeatherForecast&gt;(serialized);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine(forecast<sp/>==<sp/>forecastDeserialized);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>True</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>record<sp/>WeatherForecast(DateTimeOffset<sp/>Date,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TemperatureCelsius,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">?<sp/>Summary);</highlight></codeline>
</programlisting></para>
<para>Serialization using the source generator: <programlisting filename=".cs"><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json.Serialization;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">WeatherForecast<sp/>forecast<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(DateTimeOffset.Now,<sp/>26.6f,<sp/></highlight><highlight class="stringliteral">&quot;Sunny&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">var<sp/>serialized<sp/>=<sp/>JsonSerializer.Serialize(forecast,<sp/>SourceGenerationContext.Default.WeatherForecast);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine(serialized);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{&quot;Date&quot;:&quot;2023-08-02T16:01:20.9025406+00:00&quot;,&quot;TemperatureCelsius&quot;:26.6,&quot;Summary&quot;:&quot;Sunny&quot;}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">var<sp/>forecastDeserialized<sp/>=<sp/>JsonSerializer.Deserialize&lt;WeatherForecast&gt;(serialized,<sp/>SourceGenerationContext.Default.WeatherForecast);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine(forecast<sp/>==<sp/>forecastDeserialized);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>True</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>record<sp/>WeatherForecast(DateTimeOffset<sp/>Date,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TemperatureCelsius,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">?<sp/>Summary);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[JsonSourceGenerationOptions(WriteIndented<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)]</highlight></codeline>
<codeline><highlight class="normal">[JsonSerializable(typeof(WeatherForecast))]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">partial<sp/>class<sp/></highlight><highlight class="normal">SourceGenerationContext<sp/>:<sp/>JsonSerializerContext</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Using the JSON DOM: <programlisting filename=".cs"><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal">System;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json.Nodes;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>jsonString<sp/>=</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;{</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&quot;&quot;Date&quot;&quot;:<sp/>&quot;&quot;2019-08-01T00:00:00&quot;&quot;,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&quot;&quot;Temperature&quot;&quot;:<sp/>25,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&quot;&quot;Summary&quot;&quot;:<sp/>&quot;&quot;Hot&quot;&quot;,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&quot;&quot;DatesAvailable&quot;&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;2019-08-01T00:00:00&quot;&quot;,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;2019-08-02T00:00:00&quot;&quot;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&quot;&quot;TemperatureRanges&quot;&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Cold&quot;&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;High&quot;&quot;:<sp/>20,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Low&quot;&quot;:<sp/>-10</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Hot&quot;&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;High&quot;&quot;:<sp/>60,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Low&quot;&quot;:<sp/>20</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="stringliteral">}</highlight></codeline>
<codeline><highlight class="stringliteral">&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>forecastNode<sp/>=<sp/>JsonNode.Parse(jsonString)!;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>value<sp/>from<sp/>a<sp/>JsonNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>temperatureNode<sp/>=<sp/>forecastNode[</highlight><highlight class="stringliteral">&quot;Temperature&quot;</highlight><highlight class="normal">]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;Type={temperatureNode.GetType()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;JSON={temperatureNode.ToJsonString()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Type<sp/>=<sp/>System.Text.Json.Nodes.JsonValue`1[System.Text.Json.JsonElement]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//JSON<sp/>=<sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>typed<sp/>value<sp/>from<sp/>a<sp/>JsonNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temperatureInt<sp/>=<sp/>(int)forecastNode[</highlight><highlight class="stringliteral">&quot;Temperature&quot;</highlight><highlight class="normal">]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;Value={temperatureInt}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Value=25</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>typed<sp/>value<sp/>from<sp/>a<sp/>JsonNode<sp/>by<sp/>using<sp/>GetValue&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">temperatureInt<sp/>=<sp/>forecastNode[</highlight><highlight class="stringliteral">&quot;Temperature&quot;</highlight><highlight class="normal">]!.GetValue&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;TemperatureInt={temperatureInt}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Value=25</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>JSON<sp/>object<sp/>from<sp/>a<sp/>JsonNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>temperatureRanges<sp/>=<sp/>forecastNode[</highlight><highlight class="stringliteral">&quot;TemperatureRanges&quot;</highlight><highlight class="normal">]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;Type={temperatureRanges.GetType()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;JSON={temperatureRanges.ToJsonString()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Type<sp/>=<sp/>System.Text.Json.Nodes.JsonObject</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//JSON<sp/>=<sp/>{<sp/>&quot;Cold&quot;:{<sp/>&quot;High&quot;:20,&quot;Low&quot;:-10},&quot;Hot&quot;:{<sp/>&quot;High&quot;:60,&quot;Low&quot;:20}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>JSON<sp/>array<sp/>from<sp/>a<sp/>JsonNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>datesAvailable<sp/>=<sp/>forecastNode[</highlight><highlight class="stringliteral">&quot;DatesAvailable&quot;</highlight><highlight class="normal">]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;Type={datesAvailable.GetType()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;JSON={datesAvailable.ToJsonString()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//datesAvailable<sp/>Type<sp/>=<sp/>System.Text.Json.Nodes.JsonArray</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//datesAvailable<sp/>JSON<sp/>=[&quot;2019-08-01T00:00:00&quot;,<sp/>&quot;2019-08-02T00:00:00&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>an<sp/>array<sp/>element<sp/>value<sp/>from<sp/>a<sp/>JsonArray.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>firstDateAvailable<sp/>=<sp/>datesAvailable[0]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;Type={firstDateAvailable.GetType()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;JSON={firstDateAvailable.ToJsonString()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Type<sp/>=<sp/>System.Text.Json.Nodes.JsonValue`1[System.Text.Json.JsonElement]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//JSON<sp/>=<sp/>&quot;2019-08-01T00:00:00&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>typed<sp/>value<sp/>by<sp/>chaining<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coldHighTemperature<sp/>=<sp/>(int)forecastNode[</highlight><highlight class="stringliteral">&quot;TemperatureRanges&quot;</highlight><highlight class="normal">]![</highlight><highlight class="stringliteral">&quot;Cold&quot;</highlight><highlight class="normal">]![</highlight><highlight class="stringliteral">&quot;High&quot;</highlight><highlight class="normal">]!;</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;TemperatureRanges.Cold.High={coldHighTemperature}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//TemperatureRanges.Cold.High<sp/>=<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parse<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>datesNode<sp/>=<sp/>JsonNode.Parse(</highlight><highlight class="stringliteral">@&quot;[&quot;&quot;2019-08-01T00:00:00&quot;&quot;,&quot;&quot;2019-08-02T00:00:00&quot;&quot;]&quot;</highlight><highlight class="normal">)!;</highlight></codeline>
<codeline><highlight class="normal">JsonNode<sp/>firstDate<sp/>=<sp/>datesNode[0]!.GetValue&lt;DateTime&gt;();</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine($</highlight><highlight class="stringliteral">&quot;firstDate={<sp/>firstDate}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//output:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//firstDate<sp/>=<sp/>&quot;2019-08-01T00:00:00&quot;</highlight></codeline>
</programlisting></para>
<para>Using the low-level JSON reader/writer types <programlisting filename=".cs"><codeline><highlight class="keyword">using<sp/></highlight><highlight class="normal">System;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.IO;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text.Json;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">var<sp/>writerOptions<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>JsonWriterOptions</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Indented<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">var<sp/>stream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MemoryStream();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">var<sp/>writer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Utf8JsonWriter(stream,<sp/>writerOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">writer.WriteStartObject();</highlight></codeline>
<codeline><highlight class="normal">writer.WriteString(</highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">,<sp/>DateTimeOffset.Parse(</highlight><highlight class="stringliteral">&quot;8/2/2023<sp/>9:00<sp/>AM&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">writer.WriteNumber(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">writer.WriteEndObject();</highlight></codeline>
<codeline><highlight class="normal">writer.Flush();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">var<sp/>jsonBytes<sp/>=<sp/>stream.ToArray();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>json<sp/>=<sp/>Encoding.UTF8.GetString(jsonBytes);</highlight></codeline>
<codeline><highlight class="normal">Console.WriteLine(json);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&quot;date&quot;:<sp/>&quot;2023-08-02T09:00:00+00:00&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&quot;temp&quot;:<sp/>42</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">var<sp/>readerOptions<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>JsonReaderOptions</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AllowTrailingCommas<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CommentHandling<sp/>=<sp/>JsonCommentHandling.Skip</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">var<sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Utf8JsonReader(jsonBytes,<sp/>readerOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(reader.Read())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Console.Write(reader.TokenType);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(reader.TokenType)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JsonTokenType.PropertyName:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JsonTokenType.String:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">?<sp/>text<sp/>=<sp/>reader.GetString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.Write(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.Write(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>JsonTokenType.Number:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intValue<sp/>=<sp/>reader.GetInt32();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.Write(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.Write(intValue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>token<sp/>types<sp/>elided<sp/>for<sp/>brevity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Console.WriteLine();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>StartObject</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>PropertyName<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>2023-08-02T09:00:00+00:00</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>PropertyName<sp/>temp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>42</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>EndObject</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md51">
<title>Main Types</title><para>The main types provided by this library are:</para>
<para><itemizedlist>
<listitem><para><computeroutput>System.Text.Json.Utf8JsonWriter</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.Utf8JsonReader</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.JsonSerializer</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.JsonConverter</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.JsonDocument</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.Nodes.JsonNode</computeroutput></para>
</listitem><listitem><para><computeroutput>System.Text.Json.Serialization.Metadata.JsonTypeInfo</computeroutput></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md52">
<title>Additional Documentation</title><para><itemizedlist>
<listitem><para><ulink url="https://learn.microsoft.com/dotnet/standard/serialization/system-text-json/overview">Conceptual documentation</ulink></para>
</listitem><listitem><para><ulink url="https://learn.microsoft.com/dotnet/api/system.text.json">API documentation</ulink></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md53">
<title>Related Packages</title><para><itemizedlist>
<listitem><para>Lightweight data formats abstraction: <ulink url="https://www.nuget.org/packages/System.Memory.Data/">System.Memory.Data</ulink></para>
</listitem><listitem><para>Serialization of HttpContent: <ulink url="https://www.nuget.org/packages/System.Net.Http.Json/">System.Net.Http.Json</ulink></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_packages_2_system_8_text_8_json_88_80_85_2_p_a_c_k_a_g_e_1autotoc_md54">
<title>Feedback &amp; Contributing</title><para>System.Text.Json is released as open source under the <ulink url="https://licenses.nuget.org/MIT">MIT license</ulink>. Bug reports and contributions are welcome at <ulink url="https://github.com/dotnet/runtime">the GitHub repository</ulink>. </para>
</sect1>
    </detaileddescription>
    <location file="packages/System.Text.Json.8.0.5/PACKAGE.md"/>
  </compounddef>
</doxygen>
